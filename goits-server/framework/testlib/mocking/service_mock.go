// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocking is a generated GoMock package.
package mocking

import (
	context "context"
	services "github.com/cpekyaman/goits/framework/services"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSearcherService is a mock of SearcherService interface
type MockSearcherService struct {
	ctrl     *gomock.Controller
	recorder *MockSearcherServiceMockRecorder
}

// MockSearcherServiceMockRecorder is the mock recorder for MockSearcherService
type MockSearcherServiceMockRecorder struct {
	mock *MockSearcherService
}

// NewMockSearcherService creates a new mock instance
func NewMockSearcherService(ctrl *gomock.Controller) *MockSearcherService {
	mock := &MockSearcherService{ctrl: ctrl}
	mock.recorder = &MockSearcherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearcherService) EXPECT() *MockSearcherServiceMockRecorder {
	return m.recorder
}

// FindOne mocks base method
func (m *MockSearcherService) FindOne(ctx context.Context, attr string, attrValue interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, attr, attrValue)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *MockSearcherServiceMockRecorder) FindOne(ctx, attr, attrValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockSearcherService)(nil).FindOne), ctx, attr, attrValue)
}

// FindAll mocks base method
func (m *MockSearcherService) FindAll(ctx context.Context, attrs map[string]interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, attrs)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockSearcherServiceMockRecorder) FindAll(ctx, attrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockSearcherService)(nil).FindAll), ctx, attrs)
}

// FindAllPaged mocks base method
func (m *MockSearcherService) FindAllPaged(ctx context.Context, attrs map[string]interface{}, limit uint, offset uint64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllPaged", ctx, attrs, limit, offset)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllPaged indicates an expected call of FindAllPaged
func (mr *MockSearcherServiceMockRecorder) FindAllPaged(ctx, attrs, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllPaged", reflect.TypeOf((*MockSearcherService)(nil).FindAllPaged), ctx, attrs, limit, offset)
}

// MockReaderService is a mock of ReaderService interface
type MockReaderService struct {
	ctrl     *gomock.Controller
	recorder *MockReaderServiceMockRecorder
}

// MockReaderServiceMockRecorder is the mock recorder for MockReaderService
type MockReaderServiceMockRecorder struct {
	mock *MockReaderService
}

// NewMockReaderService creates a new mock instance
func NewMockReaderService(ctrl *gomock.Controller) *MockReaderService {
	mock := &MockReaderService{ctrl: ctrl}
	mock.recorder = &MockReaderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReaderService) EXPECT() *MockReaderServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockReaderService) GetAll(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockReaderServiceMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockReaderService)(nil).GetAll), ctx)
}

// GetAllPaged mocks base method
func (m *MockReaderService) GetAllPaged(ctx context.Context, limit uint, offset uint64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPaged", ctx, limit, offset)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPaged indicates an expected call of GetAllPaged
func (mr *MockReaderServiceMockRecorder) GetAllPaged(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaged", reflect.TypeOf((*MockReaderService)(nil).GetAllPaged), ctx, limit, offset)
}

// GetById mocks base method
func (m *MockReaderService) GetById(ctx context.Context, id uint64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockReaderServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockReaderService)(nil).GetById), ctx, id)
}

// MockObjectBinder is a mock of ObjectBinder interface
type MockObjectBinder struct {
	ctrl     *gomock.Controller
	recorder *MockObjectBinderMockRecorder
}

// MockObjectBinderMockRecorder is the mock recorder for MockObjectBinder
type MockObjectBinderMockRecorder struct {
	mock *MockObjectBinder
}

// NewMockObjectBinder creates a new mock instance
func NewMockObjectBinder(ctrl *gomock.Controller) *MockObjectBinder {
	mock := &MockObjectBinder{ctrl: ctrl}
	mock.recorder = &MockObjectBinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockObjectBinder) EXPECT() *MockObjectBinderMockRecorder {
	return m.recorder
}

// BindTo mocks base method
func (m *MockObjectBinder) BindTo(target interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindTo", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindTo indicates an expected call of BindTo
func (mr *MockObjectBinderMockRecorder) BindTo(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindTo", reflect.TypeOf((*MockObjectBinder)(nil).BindTo), target)
}

// MockCreatorService is a mock of CreatorService interface
type MockCreatorService struct {
	ctrl     *gomock.Controller
	recorder *MockCreatorServiceMockRecorder
}

// MockCreatorServiceMockRecorder is the mock recorder for MockCreatorService
type MockCreatorServiceMockRecorder struct {
	mock *MockCreatorService
}

// NewMockCreatorService creates a new mock instance
func NewMockCreatorService(ctrl *gomock.Controller) *MockCreatorService {
	mock := &MockCreatorService{ctrl: ctrl}
	mock.recorder = &MockCreatorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreatorService) EXPECT() *MockCreatorServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCreatorService) Create(ctx context.Context, binding services.ObjectBinder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockCreatorServiceMockRecorder) Create(ctx, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreatorService)(nil).Create), ctx, binding)
}

// MockUpdaterService is a mock of UpdaterService interface
type MockUpdaterService struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterServiceMockRecorder
}

// MockUpdaterServiceMockRecorder is the mock recorder for MockUpdaterService
type MockUpdaterServiceMockRecorder struct {
	mock *MockUpdaterService
}

// NewMockUpdaterService creates a new mock instance
func NewMockUpdaterService(ctrl *gomock.Controller) *MockUpdaterService {
	mock := &MockUpdaterService{ctrl: ctrl}
	mock.recorder = &MockUpdaterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdaterService) EXPECT() *MockUpdaterServiceMockRecorder {
	return m.recorder
}

// Update mocks base method
func (m *MockUpdaterService) Update(ctx context.Context, id uint64, binding services.ObjectBinder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUpdaterServiceMockRecorder) Update(ctx, id, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpdaterService)(nil).Update), ctx, id, binding)
}

// MockDeleterService is a mock of DeleterService interface
type MockDeleterService struct {
	ctrl     *gomock.Controller
	recorder *MockDeleterServiceMockRecorder
}

// MockDeleterServiceMockRecorder is the mock recorder for MockDeleterService
type MockDeleterServiceMockRecorder struct {
	mock *MockDeleterService
}

// NewMockDeleterService creates a new mock instance
func NewMockDeleterService(ctrl *gomock.Controller) *MockDeleterService {
	mock := &MockDeleterService{ctrl: ctrl}
	mock.recorder = &MockDeleterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeleterService) EXPECT() *MockDeleterServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockDeleterService) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDeleterServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeleterService)(nil).Delete), ctx, id)
}

// MockWriterService is a mock of WriterService interface
type MockWriterService struct {
	ctrl     *gomock.Controller
	recorder *MockWriterServiceMockRecorder
}

// MockWriterServiceMockRecorder is the mock recorder for MockWriterService
type MockWriterServiceMockRecorder struct {
	mock *MockWriterService
}

// NewMockWriterService creates a new mock instance
func NewMockWriterService(ctrl *gomock.Controller) *MockWriterService {
	mock := &MockWriterService{ctrl: ctrl}
	mock.recorder = &MockWriterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriterService) EXPECT() *MockWriterServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockWriterService) Create(ctx context.Context, binding services.ObjectBinder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockWriterServiceMockRecorder) Create(ctx, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWriterService)(nil).Create), ctx, binding)
}

// Update mocks base method
func (m *MockWriterService) Update(ctx context.Context, id uint64, binding services.ObjectBinder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockWriterServiceMockRecorder) Update(ctx, id, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWriterService)(nil).Update), ctx, id, binding)
}

// MockReaderWriterService is a mock of ReaderWriterService interface
type MockReaderWriterService struct {
	ctrl     *gomock.Controller
	recorder *MockReaderWriterServiceMockRecorder
}

// MockReaderWriterServiceMockRecorder is the mock recorder for MockReaderWriterService
type MockReaderWriterServiceMockRecorder struct {
	mock *MockReaderWriterService
}

// NewMockReaderWriterService creates a new mock instance
func NewMockReaderWriterService(ctrl *gomock.Controller) *MockReaderWriterService {
	mock := &MockReaderWriterService{ctrl: ctrl}
	mock.recorder = &MockReaderWriterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReaderWriterService) EXPECT() *MockReaderWriterServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockReaderWriterService) GetAll(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockReaderWriterServiceMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockReaderWriterService)(nil).GetAll), ctx)
}

// GetAllPaged mocks base method
func (m *MockReaderWriterService) GetAllPaged(ctx context.Context, limit uint, offset uint64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPaged", ctx, limit, offset)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPaged indicates an expected call of GetAllPaged
func (mr *MockReaderWriterServiceMockRecorder) GetAllPaged(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaged", reflect.TypeOf((*MockReaderWriterService)(nil).GetAllPaged), ctx, limit, offset)
}

// GetById mocks base method
func (m *MockReaderWriterService) GetById(ctx context.Context, id uint64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockReaderWriterServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockReaderWriterService)(nil).GetById), ctx, id)
}

// Create mocks base method
func (m *MockReaderWriterService) Create(ctx context.Context, binding services.ObjectBinder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockReaderWriterServiceMockRecorder) Create(ctx, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReaderWriterService)(nil).Create), ctx, binding)
}

// Update mocks base method
func (m *MockReaderWriterService) Update(ctx context.Context, id uint64, binding services.ObjectBinder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockReaderWriterServiceMockRecorder) Update(ctx, id, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReaderWriterService)(nil).Update), ctx, id, binding)
}

// MockCRUDService is a mock of CRUDService interface
type MockCRUDService struct {
	ctrl     *gomock.Controller
	recorder *MockCRUDServiceMockRecorder
}

// MockCRUDServiceMockRecorder is the mock recorder for MockCRUDService
type MockCRUDServiceMockRecorder struct {
	mock *MockCRUDService
}

// NewMockCRUDService creates a new mock instance
func NewMockCRUDService(ctrl *gomock.Controller) *MockCRUDService {
	mock := &MockCRUDService{ctrl: ctrl}
	mock.recorder = &MockCRUDServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCRUDService) EXPECT() *MockCRUDServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockCRUDService) GetAll(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockCRUDServiceMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCRUDService)(nil).GetAll), ctx)
}

// GetAllPaged mocks base method
func (m *MockCRUDService) GetAllPaged(ctx context.Context, limit uint, offset uint64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPaged", ctx, limit, offset)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPaged indicates an expected call of GetAllPaged
func (mr *MockCRUDServiceMockRecorder) GetAllPaged(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaged", reflect.TypeOf((*MockCRUDService)(nil).GetAllPaged), ctx, limit, offset)
}

// GetById mocks base method
func (m *MockCRUDService) GetById(ctx context.Context, id uint64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockCRUDServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCRUDService)(nil).GetById), ctx, id)
}

// Create mocks base method
func (m *MockCRUDService) Create(ctx context.Context, binding services.ObjectBinder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockCRUDServiceMockRecorder) Create(ctx, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCRUDService)(nil).Create), ctx, binding)
}

// Update mocks base method
func (m *MockCRUDService) Update(ctx context.Context, id uint64, binding services.ObjectBinder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockCRUDServiceMockRecorder) Update(ctx, id, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCRUDService)(nil).Update), ctx, id, binding)
}

// Delete mocks base method
func (m *MockCRUDService) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCRUDServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCRUDService)(nil).Delete), ctx, id)
}
