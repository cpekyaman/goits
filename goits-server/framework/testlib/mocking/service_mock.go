// Code generated by MockGen. DO NOT EDIT.
// Source: crud.go

// Package mocking is a generated GoMock package.
package mocking

import (
	context "context"
	services "github.com/cpekyaman/goits/framework/services"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGetAllService is a mock of GetAllService interface
type MockGetAllService struct {
	ctrl     *gomock.Controller
	recorder *MockGetAllServiceMockRecorder
}

// MockGetAllServiceMockRecorder is the mock recorder for MockGetAllService
type MockGetAllServiceMockRecorder struct {
	mock *MockGetAllService
}

// NewMockGetAllService creates a new mock instance
func NewMockGetAllService(ctrl *gomock.Controller) *MockGetAllService {
	mock := &MockGetAllService{ctrl: ctrl}
	mock.recorder = &MockGetAllServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetAllService) EXPECT() *MockGetAllServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockGetAllService) GetAll(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockGetAllServiceMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGetAllService)(nil).GetAll), ctx)
}

// GetAllPaged mocks base method
func (m *MockGetAllService) GetAllPaged(ctx context.Context, limit uint, offset uint64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPaged", ctx, limit, offset)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPaged indicates an expected call of GetAllPaged
func (mr *MockGetAllServiceMockRecorder) GetAllPaged(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaged", reflect.TypeOf((*MockGetAllService)(nil).GetAllPaged), ctx, limit, offset)
}

// MockGetByIdService is a mock of GetByIdService interface
type MockGetByIdService struct {
	ctrl     *gomock.Controller
	recorder *MockGetByIdServiceMockRecorder
}

// MockGetByIdServiceMockRecorder is the mock recorder for MockGetByIdService
type MockGetByIdServiceMockRecorder struct {
	mock *MockGetByIdService
}

// NewMockGetByIdService creates a new mock instance
func NewMockGetByIdService(ctrl *gomock.Controller) *MockGetByIdService {
	mock := &MockGetByIdService{ctrl: ctrl}
	mock.recorder = &MockGetByIdServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetByIdService) EXPECT() *MockGetByIdServiceMockRecorder {
	return m.recorder
}

// GetById mocks base method
func (m *MockGetByIdService) GetById(ctx context.Context, id uint64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockGetByIdServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockGetByIdService)(nil).GetById), ctx, id)
}

// MockReaderService is a mock of ReaderService interface
type MockReaderService struct {
	ctrl     *gomock.Controller
	recorder *MockReaderServiceMockRecorder
}

// MockReaderServiceMockRecorder is the mock recorder for MockReaderService
type MockReaderServiceMockRecorder struct {
	mock *MockReaderService
}

// NewMockReaderService creates a new mock instance
func NewMockReaderService(ctrl *gomock.Controller) *MockReaderService {
	mock := &MockReaderService{ctrl: ctrl}
	mock.recorder = &MockReaderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReaderService) EXPECT() *MockReaderServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockReaderService) GetAll(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockReaderServiceMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockReaderService)(nil).GetAll), ctx)
}

// GetAllPaged mocks base method
func (m *MockReaderService) GetAllPaged(ctx context.Context, limit uint, offset uint64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPaged", ctx, limit, offset)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPaged indicates an expected call of GetAllPaged
func (mr *MockReaderServiceMockRecorder) GetAllPaged(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaged", reflect.TypeOf((*MockReaderService)(nil).GetAllPaged), ctx, limit, offset)
}

// GetById mocks base method
func (m *MockReaderService) GetById(ctx context.Context, id uint64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockReaderServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockReaderService)(nil).GetById), ctx, id)
}

// MockCreateService is a mock of CreateService interface
type MockCreateService struct {
	ctrl     *gomock.Controller
	recorder *MockCreateServiceMockRecorder
}

// MockCreateServiceMockRecorder is the mock recorder for MockCreateService
type MockCreateServiceMockRecorder struct {
	mock *MockCreateService
}

// NewMockCreateService creates a new mock instance
func NewMockCreateService(ctrl *gomock.Controller) *MockCreateService {
	mock := &MockCreateService{ctrl: ctrl}
	mock.recorder = &MockCreateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateService) EXPECT() *MockCreateServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCreateService) Create(ctx context.Context, binding services.ObjectBinder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockCreateServiceMockRecorder) Create(ctx, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreateService)(nil).Create), ctx, binding)
}

// MockUpdateService is a mock of UpdateService interface
type MockUpdateService struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateServiceMockRecorder
}

// MockUpdateServiceMockRecorder is the mock recorder for MockUpdateService
type MockUpdateServiceMockRecorder struct {
	mock *MockUpdateService
}

// NewMockUpdateService creates a new mock instance
func NewMockUpdateService(ctrl *gomock.Controller) *MockUpdateService {
	mock := &MockUpdateService{ctrl: ctrl}
	mock.recorder = &MockUpdateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdateService) EXPECT() *MockUpdateServiceMockRecorder {
	return m.recorder
}

// Update mocks base method
func (m *MockUpdateService) Update(ctx context.Context, id uint64, binding services.ObjectBinder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUpdateServiceMockRecorder) Update(ctx, id, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpdateService)(nil).Update), ctx, id, binding)
}

// MockWriterService is a mock of WriterService interface
type MockWriterService struct {
	ctrl     *gomock.Controller
	recorder *MockWriterServiceMockRecorder
}

// MockWriterServiceMockRecorder is the mock recorder for MockWriterService
type MockWriterServiceMockRecorder struct {
	mock *MockWriterService
}

// NewMockWriterService creates a new mock instance
func NewMockWriterService(ctrl *gomock.Controller) *MockWriterService {
	mock := &MockWriterService{ctrl: ctrl}
	mock.recorder = &MockWriterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriterService) EXPECT() *MockWriterServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockWriterService) Create(ctx context.Context, binding services.ObjectBinder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockWriterServiceMockRecorder) Create(ctx, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWriterService)(nil).Create), ctx, binding)
}

// Update mocks base method
func (m *MockWriterService) Update(ctx context.Context, id uint64, binding services.ObjectBinder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockWriterServiceMockRecorder) Update(ctx, id, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWriterService)(nil).Update), ctx, id, binding)
}

// MockCrudService is a mock of CrudService interface
type MockCrudService struct {
	ctrl     *gomock.Controller
	recorder *MockCrudServiceMockRecorder
}

// MockCrudServiceMockRecorder is the mock recorder for MockCrudService
type MockCrudServiceMockRecorder struct {
	mock *MockCrudService
}

// NewMockCrudService creates a new mock instance
func NewMockCrudService(ctrl *gomock.Controller) *MockCrudService {
	mock := &MockCrudService{ctrl: ctrl}
	mock.recorder = &MockCrudServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCrudService) EXPECT() *MockCrudServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockCrudService) GetAll(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockCrudServiceMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCrudService)(nil).GetAll), ctx)
}

// GetAllPaged mocks base method
func (m *MockCrudService) GetAllPaged(ctx context.Context, limit uint, offset uint64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPaged", ctx, limit, offset)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPaged indicates an expected call of GetAllPaged
func (mr *MockCrudServiceMockRecorder) GetAllPaged(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaged", reflect.TypeOf((*MockCrudService)(nil).GetAllPaged), ctx, limit, offset)
}

// GetById mocks base method
func (m *MockCrudService) GetById(ctx context.Context, id uint64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockCrudServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCrudService)(nil).GetById), ctx, id)
}

// Create mocks base method
func (m *MockCrudService) Create(ctx context.Context, binding services.ObjectBinder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockCrudServiceMockRecorder) Create(ctx, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCrudService)(nil).Create), ctx, binding)
}

// Update mocks base method
func (m *MockCrudService) Update(ctx context.Context, id uint64, binding services.ObjectBinder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockCrudServiceMockRecorder) Update(ctx, id, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCrudService)(nil).Update), ctx, id, binding)
}

// MockObjectBinder is a mock of ObjectBinder interface
type MockObjectBinder struct {
	ctrl     *gomock.Controller
	recorder *MockObjectBinderMockRecorder
}

// MockObjectBinderMockRecorder is the mock recorder for MockObjectBinder
type MockObjectBinderMockRecorder struct {
	mock *MockObjectBinder
}

// NewMockObjectBinder creates a new mock instance
func NewMockObjectBinder(ctrl *gomock.Controller) *MockObjectBinder {
	mock := &MockObjectBinder{ctrl: ctrl}
	mock.recorder = &MockObjectBinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockObjectBinder) EXPECT() *MockObjectBinderMockRecorder {
	return m.recorder
}

// BindTo mocks base method
func (m *MockObjectBinder) BindTo(target interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindTo", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindTo indicates an expected call of BindTo
func (mr *MockObjectBinderMockRecorder) BindTo(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindTo", reflect.TypeOf((*MockObjectBinder)(nil).BindTo), target)
}
