// Code generated by MockGen. DO NOT EDIT.
// Source: validator.go

// Package mocking is a generated GoMock package.
package mocking

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockValidationProvider is a mock of ValidationProvider interface
type MockValidationProvider struct {
	ctrl     *gomock.Controller
	recorder *MockValidationProviderMockRecorder
}

// MockValidationProviderMockRecorder is the mock recorder for MockValidationProvider
type MockValidationProviderMockRecorder struct {
	mock *MockValidationProvider
}

// NewMockValidationProvider creates a new mock instance
func NewMockValidationProvider(ctrl *gomock.Controller) *MockValidationProvider {
	mock := &MockValidationProvider{ctrl: ctrl}
	mock.recorder = &MockValidationProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidationProvider) EXPECT() *MockValidationProviderMockRecorder {
	return m.recorder
}

// ValidateStruct mocks base method
func (m *MockValidationProvider) ValidateStruct(typeName string, entity interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateStruct", typeName, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateStruct indicates an expected call of ValidateStruct
func (mr *MockValidationProviderMockRecorder) ValidateStruct(typeName, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateStruct", reflect.TypeOf((*MockValidationProvider)(nil).ValidateStruct), typeName, entity)
}

// MockValidator is a mock of Validator interface
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// Type mocks base method
func (m *MockValidator) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockValidatorMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockValidator)(nil).Type))
}

// Params mocks base method
func (m *MockValidator) Params() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Params")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Params indicates an expected call of Params
func (mr *MockValidatorMockRecorder) Params() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockValidator)(nil).Params))
}

// Validate mocks base method
func (m *MockValidator) Validate(value interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockValidatorMockRecorder) Validate(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidator)(nil).Validate), value)
}
