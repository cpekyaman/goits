// Code generated by MockGen. DO NOT EDIT.
// Source: resource.go

// Package mocking is a generated GoMock package.
package mocking

import (
	services "github.com/cpekyaman/goits/framework/services"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockRequestBinder is a mock of RequestBinder interface
type MockRequestBinder struct {
	ctrl     *gomock.Controller
	recorder *MockRequestBinderMockRecorder
}

// MockRequestBinderMockRecorder is the mock recorder for MockRequestBinder
type MockRequestBinderMockRecorder struct {
	mock *MockRequestBinder
}

// NewMockRequestBinder creates a new mock instance
func NewMockRequestBinder(ctrl *gomock.Controller) *MockRequestBinder {
	mock := &MockRequestBinder{ctrl: ctrl}
	mock.recorder = &MockRequestBinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequestBinder) EXPECT() *MockRequestBinderMockRecorder {
	return m.recorder
}

// PathParam mocks base method
func (m *MockRequestBinder) PathParam(r *http.Request, key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathParam", r, key)
	ret0, _ := ret[0].(string)
	return ret0
}

// PathParam indicates an expected call of PathParam
func (mr *MockRequestBinderMockRecorder) PathParam(r, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathParam", reflect.TypeOf((*MockRequestBinder)(nil).PathParam), r, key)
}

// BindFunc mocks base method
func (m *MockRequestBinder) BindFunc(r *http.Request) services.ObjectBinder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindFunc", r)
	ret0, _ := ret[0].(services.ObjectBinder)
	return ret0
}

// BindFunc indicates an expected call of BindFunc
func (mr *MockRequestBinderMockRecorder) BindFunc(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindFunc", reflect.TypeOf((*MockRequestBinder)(nil).BindFunc), r)
}

// MockResponseRenderer is a mock of ResponseRenderer interface
type MockResponseRenderer struct {
	ctrl     *gomock.Controller
	recorder *MockResponseRendererMockRecorder
}

// MockResponseRendererMockRecorder is the mock recorder for MockResponseRenderer
type MockResponseRendererMockRecorder struct {
	mock *MockResponseRenderer
}

// NewMockResponseRenderer creates a new mock instance
func NewMockResponseRenderer(ctrl *gomock.Controller) *MockResponseRenderer {
	mock := &MockResponseRenderer{ctrl: ctrl}
	mock.recorder = &MockResponseRendererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResponseRenderer) EXPECT() *MockResponseRendererMockRecorder {
	return m.recorder
}

// JSON mocks base method
func (m *MockResponseRenderer) JSON(w http.ResponseWriter, r *http.Request, data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JSON", w, r, data)
}

// JSON indicates an expected call of JSON
func (mr *MockResponseRendererMockRecorder) JSON(w, r, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSON", reflect.TypeOf((*MockResponseRenderer)(nil).JSON), w, r, data)
}
