// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package mocking is a generated GoMock package.
package mocking

import (
	caching "github.com/cpekyaman/goits/framework/caching"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCacheProvider is a mock of CacheProvider interface
type MockCacheProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCacheProviderMockRecorder
}

// MockCacheProviderMockRecorder is the mock recorder for MockCacheProvider
type MockCacheProviderMockRecorder struct {
	mock *MockCacheProvider
}

// NewMockCacheProvider creates a new mock instance
func NewMockCacheProvider(ctrl *gomock.Controller) *MockCacheProvider {
	mock := &MockCacheProvider{ctrl: ctrl}
	mock.recorder = &MockCacheProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCacheProvider) EXPECT() *MockCacheProviderMockRecorder {
	return m.recorder
}

// NamedCache mocks base method
func (m *MockCacheProvider) NamedCache(name string) caching.Cache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedCache", name)
	ret0, _ := ret[0].(caching.Cache)
	return ret0
}

// NamedCache indicates an expected call of NamedCache
func (mr *MockCacheProviderMockRecorder) NamedCache(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedCache", reflect.TypeOf((*MockCacheProvider)(nil).NamedCache), name)
}

// CustomCache mocks base method
func (m *MockCacheProvider) CustomCache(config caching.CacheConfig) caching.Cache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomCache", config)
	ret0, _ := ret[0].(caching.Cache)
	return ret0
}

// CustomCache indicates an expected call of CustomCache
func (mr *MockCacheProviderMockRecorder) CustomCache(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomCache", reflect.TypeOf((*MockCacheProvider)(nil).CustomCache), config)
}

// MockCache is a mock of Cache interface
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Put mocks base method
func (m *MockCache) Put(key string, value interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockCacheMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockCache)(nil).Put), key, value)
}

// Get mocks base method
func (m *MockCache) Get(key string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), key)
}

// GetOrCompute mocks base method
func (m *MockCache) GetOrCompute(key string, compute func() (interface{}, error)) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCompute", key, compute)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCompute indicates an expected call of GetOrCompute
func (mr *MockCacheMockRecorder) GetOrCompute(key, compute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCompute", reflect.TypeOf((*MockCache)(nil).GetOrCompute), key, compute)
}

// InvalidateAll mocks base method
func (m *MockCache) InvalidateAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InvalidateAll")
}

// InvalidateAll indicates an expected call of InvalidateAll
func (mr *MockCacheMockRecorder) InvalidateAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateAll", reflect.TypeOf((*MockCache)(nil).InvalidateAll))
}

// Invalidate mocks base method
func (m *MockCache) Invalidate(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Invalidate", key)
}

// Invalidate indicates an expected call of Invalidate
func (mr *MockCacheMockRecorder) Invalidate(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockCache)(nil).Invalidate), key)
}
